from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, delete
from sqlalchemy.orm import selectinload
from sqlalchemy.exc import OperationalError
from app.database.db import AsyncSessionLocal
from app.database.models import Order, Subscriber, Product, UserQuestion, Feedback
from app.keyboards.main import get_main_menu
from app.config import load_config
from dotenv import load_dotenv
import os, re

load_dotenv()
router = Router()
config = load_config()

def is_admin(user_id: int) -> bool:
    return user_id in config.admin_ids

class AddProduct(StatesGroup):
    name = State()
    price = State()
    photo = State()

class DeleteProduct(StatesGroup):
    choosing = State()

class Broadcast(StatesGroup):
    waiting_for_text = State()
    confirm = State()

class OrderAction(StatesGroup):
    rejection_reason = State()
    ttn_input = State()

class AnswerUser(StatesGroup):
    answering = State()

@router.message(Command("orders"))
async def get_orders(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Order)
                .options(selectinload(Order.items))
                .order_by(Order.id.desc())
                .limit(5)
            )
            orders = result.scalars().all()
            print(f"Found {len(orders)} orders for admin {message.from_user.id}")

            if not orders:
                await message.answer("‚ùó –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return

            for order in orders:
                cart_text = "–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã" if not order.items else "\n".join(
                    [f"‚Ä¢ {item.product_name} ‚Äì {item.product_price} –≥—Ä–Ω √ó {item.quantity}" for item in order.items]
                )
                status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω" if order.confirmed else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                if order.rejection_reason:
                    status = f"‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω: {order.rejection_reason}"
                text = (
                    f"üßæ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                    f"{cart_text}\n\n"
                    f"üë§ {order.name}\n"
                    f"üìû {order.phone}\n"
                    f"üöö {order.address}\n"
                    f"üí≥ {order.payment}\n"
                    f"üí∞ {order.total} –≥—Ä–Ω\n"
                    f"üì¶ –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üïí {order.created_at}"
                )
                await message.answer(text, parse_mode="HTML")
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in get_orders: {e}")

@router.message(Command("pending_orders"))
async def get_pending_orders(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Order)
                .options(selectinload(Order.items))
                .where(Order.confirmed == False, Order.rejection_reason == None)
                .order_by(Order.id.desc())
            )
            orders = result.scalars().all()
            print(f"Found {len(orders)} pending orders for admin {message.from_user.id}")

        if not orders:
            await message.answer("‚ùó –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        for order in orders:
            cart_text = "–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã" if not order.items else "\n".join(
                [f"‚Ä¢ {item.product_name} ‚Äì {item.product_price} –≥—Ä–Ω √ó {item.quantity}" for item in order.items]
            )
            text = (
                f"üßæ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                f"{cart_text}\n\n"
                f"üë§ {order.name}\n"
                f"üìû {order.phone}\n"
                f"üöö {order.address}\n"
                f"üí≥ {order.payment}\n"
                f"üí∞ {order.total} –≥—Ä–Ω\n"
                f"üïí {order.created_at}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_order_{order.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_order_{order.id}")]
            ])
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in get_pending_orders: {e}")

@router.callback_query(F.data.startswith("confirm_order_"))
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    order_id = int(callback.data.split("_")[-1])
    try:
        print(f"Processing confirm for order {order_id} by admin {callback.from_user.id}")
        async with AsyncSessionLocal() as session:
            order = await session.get(Order, order_id, options=[selectinload(Order.items)])
            if not order:
                await callback.message.edit_text("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.answer()
                return

            order.confirmed = True
            await session.commit()
            print(f"Order {order_id} confirmed")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
            cart_text = "–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã" if not order.items else "\n".join(
                [f"‚Ä¢ {item.product_name} ‚Äì {item.product_price} –≥—Ä–Ω √ó {item.quantity}" for item in order.items]
            )
            user_text = (
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
                f"{cart_text}\n\n"
                f"üí∞ –°—É–º–º–∞: {order.total} –≥—Ä–Ω\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"üöö –ê–¥—Ä–µ—Å: {order.address}\n"
                f"üí≥ –û–ø–ª–∞—Ç–∞: {order.payment}"
            )
            if order.payment == "üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É":
                user_text += f"\n\nüí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {order.total} –≥—Ä–Ω –Ω–∞ –∫–∞—Ä—Ç—É: <b>{config.card_number}</b>"
            elif order.payment == "üì¶ –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂":
                user_text += "\n\nüì¶ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å—É–º–º—É –Ω–∞ –º–µ—Å—Ç–µ."
            await callback.bot.send_message(order.user_id, user_text, parse_mode="HTML")

        await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –¢–¢–ù –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        await state.set_state(OrderAction.ttn_input)
        await state.update_data(order_id=order_id)
        await callback.answer()
    except OperationalError as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in confirm_order: {e}")
        await callback.answer()

@router.message(OrderAction.ttn_input)
async def set_ttn(message: Message, state: FSMContext):
    ttn = message.text.strip()
    if not re.fullmatch(r"\d{10,14}", ttn):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¢–¢–ù (10-14 —Ü–∏—Ñ—Ä).")
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    try:
        print(f"Setting TTN for order {order_id}")
        async with AsyncSessionLocal() as session:
            order = await session.get(Order, order_id)
            if not order:
                await message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return

            order.ttn = ttn
            await session.commit()
            print(f"TTN {ttn} set for order {order_id}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_text = (
                f"üöö –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                f"üì¶ –¢–¢–ù: <b>{ttn}</b>\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã."
            )
            await message.bot.send_message(order.user_id, user_text, parse_mode="HTML")
            await message.answer(f"‚úÖ –¢–¢–ù {ttn} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É #{order_id}.")
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in set_ttn: {e}")

    await state.clear()

@router.callback_query(F.data.startswith("reject_order_"))
async def reject_order(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    order_id = int(callback.data.split("_")[-1])
    try:
        print(f"Processing reject for order {order_id} by admin {callback.from_user.id}")
        async with AsyncSessionLocal() as session:
            order = await session.get(Order, order_id)
            if not order:
                await callback.message.edit_text("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.answer()
                return

        await callback.message.edit_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")
        await state.set_state(OrderAction.rejection_reason)
        await state.update_data(order_id=order_id)
        await callback.answer()
    except OperationalError as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in reject_order: {e}")
        await callback.answer()

@router.message(OrderAction.rejection_reason)
async def set_rejection_reason(message: Message, state: FSMContext):
    reason = message.text.strip()
    if not reason or len(reason) < 5:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    try:
        print(f"Setting rejection reason for order {order_id}")
        async with AsyncSessionLocal() as session:
            order = await session.get(Order, order_id, options=[selectinload(Order.items)])
            if not order:
                await message.answer("‚ùó –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return

            order.rejection_reason = reason
            await session.commit()
            print(f"Rejection reason set for order {order_id}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cart_text = "–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã" if not order.items else "\n".join(
                [f"‚Ä¢ {item.product_name} ‚Äì {item.product_price} –≥—Ä–Ω √ó {item.quantity}" for item in order.items]
            )
            user_text = (
                f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"{cart_text}\n"
                f"üí∞ –°—É–º–º–∞: {order.total} –≥—Ä–Ω\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"üöö –ê–¥—Ä–µ—Å: {order.address}"
            )
            await message.bot.send_message(order.user_id, user_text, parse_mode="HTML")
            await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}")
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in set_rejection_reason: {e}")

    await state.clear()

@router.message(Command("broadcast"))
async def start_broadcast(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Broadcast.waiting_for_text)

@router.message(Broadcast.waiting_for_text)
async def preview_broadcast(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("‚ùó –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(text=text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")
        ]
    ])
    await message.answer(f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{text}", reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(Broadcast.confirm)

@router.callback_query(F.data == "broadcast_confirm", Broadcast.confirm)
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = await state.get_data()
    text = data["text"]
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(Subscriber).where(Subscriber.subscribed == True))
            subscribers = result.scalars().all()

        if not subscribers:
            await callback.message.edit_text("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
            await callback.answer()
            await state.clear()
            return

        sent_count = 0
        failed_count = 0
        for subscriber in subscribers:
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {subscriber.user_id}")
                await callback.bot.send_message(
                    chat_id=subscriber.user_id,
                    text=text,
                    parse_mode="HTML"
                )
                sent_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {subscriber.user_id}: {e}")
                failed_count += 1

        await callback.message.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –∏–∑ {len(subscribers)}\n"
            f"–û—à–∏–±–æ–∫: {failed_count}"
        )
    except OperationalError as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in confirm_broadcast: {e}")
    await callback.answer()
    await state.clear()

@router.callback_query(F.data == "broadcast_cancel", Broadcast.confirm)
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()
    await state.clear()

@router.message(Command("add_product"))
async def start_add_product(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    await message.answer("üõí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.name)

@router.message(AddProduct.name)
async def product_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) < 2:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
        return
    await state.update_data(name=name)
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AddProduct.price)

@router.message(AddProduct.price)
async def product_price(message: Message, state: FSMContext):
    if message.text is None or not message.text.strip().isdigit():
        await message.answer("üö´ –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(price=int(message.text.strip()))
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.photo)

@router.message(AddProduct.photo, F.photo)
async def product_photo(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        name = data["name"]
        price = data["price"]
        photo = message.photo[-1].file_id

        async with AsyncSessionLocal() as session:
            session.add(Product(name=name, price=price, photo=photo))
            await session.commit()

        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in product_photo: {e}")
    await state.clear()

@router.message(AddProduct.photo)
async def invalid_photo(message: Message):
    await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")

@router.message(Command("dell_product"))
async def choose_product_to_delete(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(Product))
            products = result.scalars().all()

        if not products:
            await message.answer("‚ùó –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=p.name, callback_data=f"delete_{p.id}")]
                for p in products
            ]
        )
        await message.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        await state.set_state(DeleteProduct.choosing)
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in choose_product_to_delete: {e}")

@router.callback_query(F.data.startswith("delete_"))
async def delete_product_callback(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    product_id = int(callback.data.split("_")[1])
    try:
        async with AsyncSessionLocal() as session:
            product = await session.get(Product, product_id)
            if not product:
                await callback.message.edit_text("‚ùó –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.answer()
                return
            await session.delete(product)
            await session.commit()
        await callback.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{product.name}¬ª —É–¥–∞–ª—ë–Ω.")
    except OperationalError as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in delete_product_callback: {e}")
    await callback.answer()
    await state.clear()

@router.message(Command("questions"))
async def list_questions(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(UserQuestion))
            questions = result.scalars().all()

        if not questions:
            await message.answer("‚ùó –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        for q in questions:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{q.id}")]
            ])
            await message.answer(
                f"üë§ @{q.username} (ID: {q.user_id})\n"
                f"üïê {q.created_at.strftime('%Y-%m-%d %H:%M')}\n\n"
                f"‚ùì {q.question}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in list_questions: {e}")

@router.callback_query(F.data.startswith("answer_"))
async def start_answering(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    question_id = int(callback.data.split("_")[1])
    await state.set_state(AnswerUser.answering)
    await state.update_data(question_id=question_id)
    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
    await callback.answer()

@router.message(AnswerUser.answering)
async def send_answer_to_user(message: Message, state: FSMContext):
    data = await state.get_data()
    question_id = data.get("question_id")
    try:
        async with AsyncSessionLocal() as session:
            question = await session.get(UserQuestion, question_id)
            if not question:
                await message.answer("üö´ –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return

            try:
                await message.bot.send_message(
                    chat_id=question.user_id,
                    text=f"üì¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n‚ùì {question.question}\n\nüí¨ {message.text}",
                    parse_mode="HTML"
                )
                await message.answer("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                print(f"Error sending answer to user {question.user_id}: {e}")
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in send_answer_to_user: {e}")
    await state.clear()

@router.message(Command("feedbacks"))
async def list_feedbacks_for_moderation(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(Feedback).where(Feedback.confirmed == False))
            feedbacks = result.scalars().all()

        if not feedbacks:
            await message.answer("‚ùó –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.")
            return

        for fb in feedbacks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_fb_{fb.id}")],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_fb_{fb.id}")]
            ])
            await message.answer(
                f"üë§ {fb.name} (ID: {fb.user_id})\n"
                f"üïí {fb.created_at.strftime('%Y-%m-%d %H:%M')}\n\n"
                f"üìù {fb.feedback}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in list_feedbacks_for_moderation: {e}")

@router.callback_query(F.data.startswith("confirm_fb_"))
async def confirm_feedback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    feedback_id = int(callback.data.split("_")[-1])
    try:
        async with AsyncSessionLocal() as session:
            feedback = await session.get(Feedback, feedback_id)
            if feedback:
                feedback.confirmed = True
                await session.commit()
                await callback.message.edit_text(
                    f"‚úÖ –û—Ç–∑—ã–≤ –æ—Ç {feedback.name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\nüìù {feedback.feedback}",
                    parse_mode="HTML"
                )
            else:
                await callback.message.edit_text("‚ùó –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except OperationalError as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in confirm_feedback: {e}")
    await callback.answer()

@router.callback_query(F.data.startswith("delete_fb_"))
async def delete_feedback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    feedback_id = int(callback.data.split("_")[-1])
    try:
        async with AsyncSessionLocal() as session:
            feedback = await session.get(Feedback, feedback_id)
            if feedback:
                await session.delete(feedback)
                await session.commit()
                await callback.message.edit_text(
                    f"üóë –û—Ç–∑—ã–≤ –æ—Ç {feedback.name} —É–¥–∞–ª—ë–Ω!\n\nüìù {feedback.feedback}",
                    parse_mode="HTML"
                )
            else:
                await callback.message.edit_text("‚ùó –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except OperationalError as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        print(f"DB Error in delete_feedback: {e}")
    await callback.answer()