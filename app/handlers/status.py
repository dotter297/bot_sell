from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from sqlalchemy.exc import OperationalError
from app.database.db import AsyncSessionLocal
from app.database.models import Order
import re

class OrderStatus(StatesGroup):
    waiting_for_phone = State()

router = Router()

@router.message(F.text == "üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
async def ask_for_phone(message: Message, state: FSMContext):
    await message.answer("üì≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ –∑–∞–∫–∞–∑–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +380501234567):")
    await state.set_state(OrderStatus.waiting_for_phone)

@router.message(OrderStatus.waiting_for_phone)
async def check_order_status(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not re.fullmatch(r"\+?\d{10,13}", phone):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +380501234567).")
        return

    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Order)
                .where(Order.phone == phone)
                .options(selectinload(Order.items))
                .order_by(Order.id.desc())
                .limit(1)
            )
            order = result.scalar_one_or_none()

            if not order:
                await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            else:
                cart_text = "–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã" if not order.items else "\n".join(
                    [f"‚Ä¢ {item.product_name} ‚Äì {item.product_price} –≥—Ä–Ω √ó {item.quantity}" for item in order.items]
                )
                text = (
                    f"üßæ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                    f"{cart_text}\n\n"
                    f"üí∞ –°—É–º–º–∞: {order.total} –≥—Ä–Ω\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                    f"üöö –ê–¥—Ä–µ—Å: {order.address}\n"
                    f"üïí –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
                )
                if order.rejection_reason:
                    text += f"üì¶ –°—Ç–∞—Ç—É—Å: <b>–û—Ç–∫–ª–æ–Ω—ë–Ω</b>\n–ü—Ä–∏—á–∏–Ω–∞: {order.rejection_reason}"
                elif not order.confirmed:
                    text += "üì¶ –°—Ç–∞—Ç—É—Å: <b>–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>"
                elif order.confirmed and not order.ttn:
                    text += "üì¶ –°—Ç–∞—Ç—É—Å: <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω</b>\n–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏."
                else:
                    text += f"üì¶ –°—Ç–∞—Ç—É—Å: <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\nüì¨ –¢–¢–ù: <b>{order.ttn}</b>"
                await message.answer(text, parse_mode="HTML")
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"DB Error in check_order_status: {e}")

    await state.clear()