from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from app.states.order_states import OrderFSM
from app.services.calculator import calculate_price
from app.keyboards.main import get_main_menu
from app.database.functions import save_order_to_db
from app.config import load_config
import re

router = Router()
config = load_config()

SALT_TYPES = {
    "–°–æ–ª—å —Ç–∞–±–ª–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è 25 –∫–≥": {
        "producer": "Sybo (–ï–≥–∏–ø–µ—Ç)",
        "guarantee": "24 –º–µ—Å",
        "price": 230
    }
}

@router.message(F.text == "üì¶–∫–∞—Ç–∞–ª–æ–≥")
async def start_order(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(OrderFSM.name)

@router.message(OrderFSM.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?")
    await state.set_state(OrderFSM.phone)

@router.message(OrderFSM.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not re.fullmatch(r"\+?\d{10,13}", phone):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +380501234567)")
        return
    await state.update_data(phone=phone)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ù–æ–≤–æ–π –ü–æ—à—Ç—ã / –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderFSM.address)

@router.message(OrderFSM.address)
async def get_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=t)] for t in SALT_TYPES],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–ª–∏:", reply_markup=kb)
    await state.set_state(OrderFSM.salt_type)

@router.message(OrderFSM.salt_type)
async def get_salt_type(message: Message, state: FSMContext):
    salt_type = message.text
    if salt_type not in SALT_TYPES:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(salt_type=salt_type)
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—à–∫–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?")
    await state.set_state(OrderFSM.quantity)

@router.message(OrderFSM.quantity)
async def get_quantity(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    quantity = int(message.text)
    data = await state.get_data()
    price = SALT_TYPES[data['salt_type']]['price']
    total = calculate_price(quantity, price)
    await state.update_data(quantity=quantity, total=total)

    await message.answer(
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: <b>{quantity} √ó {price} = {total} –≥—Ä–Ω</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É")],
                [KeyboardButton(text="üì¶ –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(OrderFSM.payment)

@router.message(OrderFSM.payment)
async def get_payment(message: Message, state: FSMContext):
    if message.text not in ["üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É", "üì¶ –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂"]:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(payment=message.text)

    data = await state.get_data()
    summary = (
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üì¶ –¢–∏–ø —Å–æ–ª–∏: {data['salt_type']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üî¢ –ö–æ–ª-–≤–æ: {data['quantity']}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: {data['payment']}\n"
        f"üí∞ –°—É–º–º–∞: {data['total']} –≥—Ä–Ω\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑? (–¥–∞ / –Ω–µ—Ç)"
    )
    await message.answer(summary)
    await state.set_state(OrderFSM.confirm)

@router.message(OrderFSM.confirm)
async def confirm_order(message: Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return

    if message.text.lower() == "–Ω–µ—Ç":
        await state.clear()
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_menu())
        return

    data = await state.get_data()

    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PostgreSQL –∏ Google Sheets
    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=get_main_menu())

    # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await state.clear()

@router.message(OrderFSM.confirm)
async def confirm_order(message: Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return

    if message.text.lower() == "–Ω–µ—Ç":
        await state.clear()
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_menu())
        return

    data = await state.get_data()

    order_data = {
        "name": data["name"],
        "phone": data["phone"],
        "address": data["address"],
        "salt_type": data["salt_type"],
        "quantity": data["quantity"],
        "total": data["total"],
        "payment": data["payment"],
    }


    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    for admin_id in config.admin_ids:
        await message.bot.send_message(admin_id, f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {data['name']} –Ω–∞ —Å—É–º–º—É {data['total']} –≥—Ä–Ω.")

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=get_main_menu())
    await state.clear()
