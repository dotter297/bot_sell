from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from app.states.order_states import OrderFSM
from app.keyboards.main import get_main_menu
from app.database.functions import save_order_to_db
from app.config import load_config
import re
from sqlalchemy import select
from sqlalchemy.exc import OperationalError
from app.database.db import AsyncSessionLocal
from app.database.models import Product
from aiogram.types import CallbackQuery, ReplyKeyboardRemove
import asyncio

router = Router()
config = load_config()

@router.message(F.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(Product))
            products = result.scalars().all()

        if not products:
            await message.answer("‚ùó –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
            return

        for product in products:
            text = (
                f"<b>{product.name}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {product.price} –≥—Ä–Ω"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart:{product.id}")]
            ])
            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=product.photo,
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"DB Error in show_catalog: {e}")

@router.callback_query(F.data.startswith("add_to_cart:"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split(":")[1])
        async with AsyncSessionLocal() as session:
            product = await session.get(Product, product_id)
            if not product:
                await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

        cart = (await state.get_data()).get("cart", [])
        cart.append({
            "id": product.id,
            "name": product.name,
            "price": product.price,
            "photo": product.photo
        })
        await state.update_data(cart=cart)
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    except OperationalError as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        print(f"DB Error in add_to_cart: {e}")

@router.message(F.text == "üí∞ –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", [])

    if not cart:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    total = sum(item["price"] for item in cart)
    text = "\n".join([f"‚Ä¢ {item['name']} ‚Äì {item['price']} –≥—Ä–Ω" for item in cart])
    text += f"\n\n<b>–ò—Ç–æ–≥–æ: {total} –≥—Ä–Ω</b>"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_cart")]
    ])

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery, state: FSMContext):
    await state.update_data(cart=[])
    await callback.message.edit_text("üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.answer()

@router.callback_query(F.data == "checkout")
async def checkout_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", [])
    if not cart:
        await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.")
        await callback.answer()
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")
    await state.set_state(OrderFSM.name)
    await callback.answer()

@router.message(OrderFSM.name)
async def get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) < 2:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
        return
    await state.update_data(name=name, user_id=message.from_user.id)
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderFSM.phone)

@router.message(OrderFSM.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not re.fullmatch(r"\+?\d{10,13}", phone):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +380501234567)")
        return
    await state.update_data(phone=phone)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ù–æ–≤–æ–π –ü–æ—à—Ç—ã / –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderFSM.address)

@router.message(OrderFSM.address)
async def get_address(message: Message, state: FSMContext):
    address = message.text.strip()
    if not address or len(address) < 5:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
        return
    await state.update_data(address=address)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É")],
                [KeyboardButton(text="üì¶ –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(OrderFSM.payment)

@router.message(OrderFSM.payment)
async def get_payment(message: Message, state: FSMContext):
    if message.text not in ["üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É", "üì¶ –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂"]:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
        return
    await state.update_data(payment=message.text)

    data = await state.get_data()
    cart = data.get("cart", [])
    total = sum(item["price"] for item in cart)

    summary = "\n".join([f"‚Ä¢ {item['name']} ‚Äì {item['price']} –≥—Ä–Ω" for item in cart])
    summary += (
        f"\n\nüë§ –ò–º—è: {data['name']}"
        f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
        f"\nüìç –ê–¥—Ä–µ—Å: {data['address']}"
        f"\nüí≥ –û–ø–ª–∞—Ç–∞: {data['payment']}"
        f"\nüí∞ –ò—Ç–æ–≥–æ: <b>{total} –≥—Ä–Ω</b>"
        "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑? (–¥–∞ / –Ω–µ—Ç)"
    )

    await state.update_data(total=total)
    await message.answer(summary, parse_mode="HTML")
    await state.set_state(OrderFSM.confirm)

@router.message(OrderFSM.confirm)
async def confirm_order(message: Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return

    if message.text.lower() == "–Ω–µ—Ç":
        await state.clear()
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_menu())
        return

    data = await state.get_data()
    try:
        await save_order_to_db(data)

        cart = data.get("cart", [])
        cart_text = "\n".join([f"‚Ä¢ {item['name']} ‚Äì {item['price']} –≥—Ä–Ω" for item in cart])
        total = data["total"]
        admin_text = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"{cart_text}\n\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞: {data['payment']}\n"
            f"üí∞ –°—É–º–º–∞: {total} –≥—Ä–Ω"
        )

        for admin_id in config.admin_ids:
            try:
                await message.bot.send_message(admin_id, admin_text, parse_mode="HTML")
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_text = (
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞."
        )
        if data["payment"] == "üí≥ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É":
            user_text += f"\n\nüí≥ –î–ª—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {total} –≥—Ä–Ω –Ω–∞ –∫–∞—Ä—Ç—É: <b>{config.card_number}</b>"
        elif data["payment"] == "üì¶ –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂":
            user_text += "\n\nüì¶ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å—É–º–º—É –Ω–∞ –º–µ—Å—Ç–µ."

        await message.answer(user_text, reply_markup=ReplyKeyboardRemove(), parse_mode="HTML")
        await asyncio.sleep(0.5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    except OperationalError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"DB Error in confirm_order: {e}")
    except Exception as e:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Unexpected error in confirm_order: {e}")
    finally:
        await state.clear()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è