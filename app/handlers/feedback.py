from aiogram import Router, F
from aiogram.types import Message
from app.database.db import AsyncSessionLocal
from app.database.models import Feedback
from app.config import load_config

router = Router()
config = load_config()

@router.message(F.text == "üì¢ –û—Ç–∑—ã–≤—ã")
async def show_feedbacks(message: Message):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            Feedback.__table__.select().order_by(Feedback.id.desc()).limit(3)
        )
        feedbacks = result.fetchall()

    if not feedbacks:
        await message.answer("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "\n\n".join([f"‚Äú{f._mapping['text']}‚Äù ‚Äî {f._mapping['name']}" for f in feedbacks])
    await message.answer(f"üì¢ –û—Ç–∑—ã–≤—ã:\n\n{text}")

# –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
@router.message(F.text.startswith("/add_feedback"))
async def add_feedback(message: Message):
    if message.from_user.id not in config.admin_ids:
        return

    try:
        parts = message.text.split(maxsplit=2)
        name, text = parts[1], parts[2]
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_feedback –ò–º—è –¢–µ–∫—Å—Ç_–æ—Ç–∑—ã–≤–∞")
        return

    async with AsyncSessionLocal() as session:
        session.add(Feedback(name=name, text=text))
        await session.commit()

    await message.answer("‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω.")

